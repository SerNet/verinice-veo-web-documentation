stages:
  - setup
  - build
  - deploy

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

# Verification (tests and code analysis) is unnecessary on 'develop' &
# 'master', because only verified MRs can be merged into those branches.
.verification:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
      when: never
    - when: on_success

default:
  image: node:24
  cache: # Cache modules in between jobs
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline

store_project_version:
  before_script: []
  rules:
    - when: on_success
  cache: []
  stage: setup
  script:
    - echo "PROJECT_VERSION=$(node -p "require('./package.json').version")" >> variables.env
  interruptible: true
  artifacts:
    when: always
    reports:
      dotenv: variables.env

determine-destinations:
  before_script: []
  image:
    name: alpine/git
    entrypoint: [ "" ]
  stage: setup
  script:
    - |-
      IMAGE_NAME="eu.gcr.io/veo-projekt/veo-web-documentation"
      DESTINATION_ARG="--destination $IMAGE_NAME:git-${CI_COMMIT_SHA} --destination $IMAGE_NAME:pipeline-id-${CI_PIPELINE_ID}"
      if echo "$CI_COMMIT_TAG" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
        DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:$CI_COMMIT_TAG"
        git fetch --tags
        LATEST_TAG=$(git tag --list | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        if [ "$CI_COMMIT_TAG" = "$LATEST_TAG" ]; then
          DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:latest"
        fi
      fi
      if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then
        DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:develop"
      fi

      echo "DESTINATION_ARG=$DESTINATION_ARG" > destinations.env
  artifacts:
    reports:
      dotenv: destinations.env
    expire_in: 1 hour

docker_image:
  stage: build
  rules:
    - when: on_success
  needs: ['store_project_version', 'determine-destinations']
  image:
    name: gcr.io/kaniko-project/executor:v1.24.0-debug
    entrypoint: ['']
  variables:
    # this does not work in Gitlab < 15.7, so we need the before_script workaround
    # GOOGLE_APPLICATION_CREDENTIALS: $GCR_ACCESS_TOKEN
  before_script:
    - export GOOGLE_APPLICATION_CREDENTIALS=${GCR_ACCESS_TOKEN}
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile" --cache=true $DESTINATION_ARG --build-arg CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA} --build-arg CI_JOB_ID=${CI_JOB_ID} --label org.opencontainers.image.version="${PROJECT_VERSION}" --label org.opencontainers.image.revision=${CI_COMMIT_SHA} --build-arg "ftp_proxy=${ftp_proxy}" --build-arg "FTP_PROXY=${ftp_proxy}" --build-arg "http_proxy=${http_proxy}" --build-arg "HTTP_PROXY=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "HTTPS_PROXY=${https_proxy}" --build-arg "no_proxy=${no_proxy}" --build-arg "NO_PROXY=${no_proxy}"
  interruptible: true

trigger_deployment:
  stage: deploy
  only:
    - develop
    - master
  trigger:
    project: veo/verinice-veo-deployment
